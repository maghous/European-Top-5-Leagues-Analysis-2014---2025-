# -*- coding: utf-8 -*-
"""Ligue1Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mm1h_k1as3RfnEkaDZ3rBF0FF0ze93xK
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import warnings
warnings.filterwarnings('ignore')

# Set style and color palette
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_palette("husl")

class Ligue1Dashboard:
    def __init__(self, df,saison,ligue):
        """
        Initialize the dashboard with Ligue 1 data

        Parameters:
        df (pandas.DataFrame): The Ligue 1 dataset
        """
        self.df = df.copy()
        self.setup_data()
        self.saison = saison
        self.ligue = ligue

    def setup_data(self):
        """Setup and prepare data for analysis"""
        # Calculate derived metrics
        self.df['goals_per_game'] = self.df['goals'] / self.df['games']
        self.df['assists_per_game'] = self.df['assists'] / self.df['games']
        self.df['shots_per_game'] = self.df['shots'] / self.df['games']
        self.df['goal_conversion'] = np.where(self.df['shots'] > 0,
                                            (self.df['goals'] / self.df['shots']) * 100, 0)
        self.df['xG_overperformance'] = self.df['goals'] - self.df['xG']
        self.df['xA_overperformance'] = self.df['assists'] - self.df['xA']
        self.df['minutes_per_goal'] = np.where(self.df['goals'] > 0,
                                             self.df['time'] / self.df['goals'], np.inf)
        self.df['total_cards'] = self.df['yellow_cards'] + (self.df['red_cards'] * 2)

    def create_dashboard(self, figsize=(24, 28)):
        """Create the complete professional dashboard"""
        fig = plt.figure(figsize=figsize)
        fig.suptitle(f"{self.ligue} PERFORMANCE DASHBOARD - SEASON {self.saison} ANALYSIS",
                     fontsize=24, fontweight='bold', y=0.985)

        # Create subplots with more spacing to prevent label overlap
        gs = fig.add_gridspec(6, 4, height_ratios=[1, 1, 1, 1, 1, 0.6],
                             width_ratios=[1, 1, 1, 1],
                             hspace=0.45, wspace=0.4,
                             left=0.08, right=0.95,
                             top=0.95, bottom=0.05)

        # Row 1: Key Performance Indicators
        self._plot_top_scorers(fig.add_subplot(gs[0, :2]))
        self._plot_top_assisters(fig.add_subplot(gs[0, 2:]))

        # Row 2: Team Analysis
        self._plot_team_performance(fig.add_subplot(gs[1, :2]))
        self._plot_team_discipline(fig.add_subplot(gs[1, 2:]))

        # Row 3: Position Analysis
        self._plot_position_comparison(fig.add_subplot(gs[2, :2]))
        self._plot_xG_analysis(fig.add_subplot(gs[2, 2:]))

        # Row 4: Advanced Metrics
        self._plot_efficiency_scatter(fig.add_subplot(gs[3, :2]))
        self._plot_playing_time_analysis(fig.add_subplot(gs[3, 2:]))

        # Row 5: Detailed Analysis
        self._plot_correlation_heatmap(fig.add_subplot(gs[4, :2]))
        self._plot_performance_distribution(fig.add_subplot(gs[4, 2:]))

        # Row 6: Summary Statistics
        self._plot_summary_stats(fig.add_subplot(gs[5, :]))

        # Apply tight layout with padding
        plt.tight_layout(pad=3.0)
        return fig

    def _plot_top_scorers(self, ax):
        """Plot top goal scorers"""
        top_scorers = self.df.nlargest(10, 'goals')

        bars = ax.barh(range(len(top_scorers)), top_scorers['goals'],
                      color=sns.color_palette("viridis", len(top_scorers)))

        # Add xG comparison
        ax.barh(range(len(top_scorers)), top_scorers['xG'],
               alpha=0.6, color='lightcoral', label='Expected Goals (xG)')

        ax.set_yticks(range(len(top_scorers)))
        # Truncate long names and team names to prevent overlap
        labels = []
        for name, team in zip(top_scorers['player_name'], top_scorers['team_title']):
            short_name = name[:15] + '...' if len(name) > 15 else name
            short_team = team[:10] + '...' if len(team) > 10 else team
            labels.append(f"{short_name}\n({short_team})")

        ax.set_yticklabels(labels, fontsize=8)
        ax.set_xlabel('Goals', fontweight='bold', fontsize=10)
        ax.set_title('TOP 10 GOAL SCORERS', fontweight='bold', fontsize=12, pad=15)
        ax.legend(fontsize=8)
        ax.grid(axis='x', alpha=0.3)

        # Add value labels
        for i, (goals, xg) in enumerate(zip(top_scorers['goals'], top_scorers['xG'])):
            ax.text(goals + 0.1, i, f'{goals}', va='center', fontweight='bold', fontsize=8)

    def _plot_top_assisters(self, ax):
        """Plot top assist providers"""
        top_assisters = self.df.nlargest(10, 'assists')

        bars = ax.barh(range(len(top_assisters)), top_assisters['assists'],
                      color=sns.color_palette("plasma", len(top_assisters)))

        # Add xA comparison
        ax.barh(range(len(top_assisters)), top_assisters['xA'],
               alpha=0.6, color='lightblue', label='Expected Assists (xA)')

        ax.set_yticks(range(len(top_assisters)))
        # Truncate long names and team names to prevent overlap
        labels = []
        for name, team in zip(top_assisters['player_name'], top_assisters['team_title']):
            short_name = name[:15] + '...' if len(name) > 15 else name
            short_team = team[:10] + '...' if len(team) > 10 else team
            labels.append(f"{short_name}\n({short_team})")

        ax.set_yticklabels(labels, fontsize=8)
        ax.set_xlabel('Assists', fontweight='bold', fontsize=10)
        ax.set_title('TOP 10 ASSIST PROVIDERS', fontweight='bold', fontsize=12, pad=15)
        ax.legend(fontsize=8)
        ax.grid(axis='x', alpha=0.3)

        # Add value labels
        for i, assists in enumerate(top_assisters['assists']):
            ax.text(assists + 0.05, i, f'{assists}', va='center', fontweight='bold', fontsize=8)

    def _plot_team_performance(self, ax):
        """Plot team offensive performance"""
        team_stats = self.df.groupby('team_title').agg({
            'goals': 'sum',
            'assists': 'sum',
            'xG': 'sum',
            'shots': 'sum'
        }).reset_index()

        team_stats = team_stats.sort_values('goals', ascending=True)

        x = np.arange(len(team_stats))
        width = 0.35

        bars1 = ax.barh(x - width/2, team_stats['goals'], width,
                       label='Goals', color='darkgreen', alpha=0.8)
        bars2 = ax.barh(x + width/2, team_stats['assists'], width,
                       label='Assists', color='orange', alpha=0.8)

        ax.set_yticks(x)
        # Truncate team names to prevent overlap
        team_labels = [name[:12] + '...' if len(name) > 12 else name
                      for name in team_stats['team_title']]
        ax.set_yticklabels(team_labels, fontsize=8)
        ax.set_xlabel('Count', fontweight='bold', fontsize=10)
        ax.set_title('TEAM OFFENSIVE PERFORMANCE', fontweight='bold', fontsize=12, pad=15)
        ax.legend(fontsize=8)
        ax.grid(axis='x', alpha=0.3)

    def _plot_team_discipline(self, ax):
        """Plot team discipline statistics"""
        discipline_stats = self.df.groupby('team_title').agg({
            'yellow_cards': 'sum',
            'red_cards': 'sum',
            'total_cards': 'sum'
        }).reset_index()

        discipline_stats = discipline_stats.sort_values('total_cards', ascending=True)

        # Create stacked bar chart
        ax.barh(discipline_stats['team_title'], discipline_stats['yellow_cards'],
               label='Yellow Cards', color='gold', alpha=0.8)
        ax.barh(discipline_stats['team_title'], discipline_stats['red_cards'],
               left=discipline_stats['yellow_cards'], label='Red Cards',
               color='red', alpha=0.8)

        # Truncate team names to prevent overlap
        team_labels = [name[:12] + '...' if len(name) > 12 else name
                      for name in discipline_stats['team_title']]
        ax.set_yticklabels(team_labels, fontsize=8)
        ax.set_xlabel('Number of Cards', fontweight='bold', fontsize=10)
        ax.set_title('TEAM DISCIPLINE RECORD', fontweight='bold', fontsize=12, pad=15)
        ax.legend(fontsize=8)
        ax.grid(axis='x', alpha=0.3)

    def _plot_position_comparison(self, ax):
        """Plot performance by position"""
        position_stats = self.df.groupby('position').agg({
            'goals': 'mean',
            'assists': 'mean',
            'shots': 'mean',
            'key_passes': 'mean'
        }).reset_index()

        # Create grouped bar chart
        x = np.arange(len(position_stats))
        width = 0.2

        ax.bar(x - width*1.5, position_stats['goals'], width, label='Avg Goals',
              color='red', alpha=0.7)
        ax.bar(x - width/2, position_stats['assists'], width, label='Avg Assists',
              color='blue', alpha=0.7)
        ax.bar(x + width/2, position_stats['shots']/10, width, label='Avg Shots/10',
              color='green', alpha=0.7)
        ax.bar(x + width*1.5, position_stats['key_passes']/5, width,
              label='Avg Key Passes/5', color='orange', alpha=0.7)

        ax.set_xticks(x)
        ax.set_xticklabels(position_stats['position'], rotation=30, ha='right', fontsize=9)
        ax.set_ylabel('Average per Player', fontweight='bold', fontsize=10)
        ax.set_title('PERFORMANCE BY POSITION', fontweight='bold', fontsize=12, pad=15)
        ax.legend(fontsize=8, loc='upper left')
        ax.grid(axis='y', alpha=0.3)

    def _plot_xG_analysis(self, ax):
        """Plot Expected Goals vs Actual Goals analysis"""
        # Filter players with significant playing time
        active_players = self.df[self.df['games'] >= 5]

        scatter = ax.scatter(active_players['xG'], active_players['goals'],
                           c=active_players['games'], cmap='viridis',
                           alpha=0.6, s=60)

        # Add perfect correlation line
        max_val = max(active_players['xG'].max(), active_players['goals'].max())
        ax.plot([0, max_val], [0, max_val], 'r--', alpha=0.5,
               label='Perfect Correlation')

        ax.set_xlabel('Expected Goals (xG)', fontweight='bold', fontsize=10)
        ax.set_ylabel('Actual Goals', fontweight='bold', fontsize=10)
        ax.set_title('xG vs ACTUAL GOALS ANALYSIS', fontweight='bold', fontsize=12, pad=15)

        # Add colorbar
        cbar = plt.colorbar(scatter, ax=ax)
        cbar.set_label('Games Played', fontweight='bold', fontsize=9)
        ax.legend(fontsize=8)
        ax.grid(alpha=0.3)

    def _plot_efficiency_scatter(self, ax):
        """Plot goal conversion efficiency"""
        # Filter players with at least 10 shots
        efficient_players = self.df[(self.df['shots'] >= 10) & (self.df['goals'] > 0)]

        scatter = ax.scatter(efficient_players['shots'], efficient_players['goal_conversion'],
                           c=efficient_players['goals'], cmap='Reds',
                           s=efficient_players['goals']*10, alpha=0.7)

        ax.set_xlabel('Total Shots', fontweight='bold', fontsize=10)
        ax.set_ylabel('Goal Conversion Rate (%)', fontweight='bold', fontsize=10)
        ax.set_title('SHOOTING EFFICIENCY ANALYSIS', fontweight='bold', fontsize=12, pad=15)

        # Add colorbar
        cbar = plt.colorbar(scatter, ax=ax)
        cbar.set_label('Goals Scored', fontweight='bold', fontsize=9)
        ax.grid(alpha=0.3)

        # Annotate top performers (reduce text size and offset)
        top_efficient = efficient_players.nlargest(3, 'goal_conversion')
        for _, player in top_efficient.iterrows():
            # Truncate player names for annotation
            short_name = player['player_name'][:12] + '...' if len(player['player_name']) > 12 else player['player_name']
            ax.annotate(short_name,
                       (player['shots'], player['goal_conversion']),
                       xytext=(8, 8), textcoords='offset points',
                       fontsize=7, alpha=0.8)

    def _plot_playing_time_analysis(self, ax):
        """Plot playing time vs performance"""
        # Create violin plot for goals by playing time categories
        self.df['time_category'] = pd.cut(self.df['time'],
                                         bins=[0, 500, 1000, 1500, 3000],
                                         labels=['Limited', 'Rotation', 'Regular', 'Key Player'])

        sns.violinplot(data=self.df, x='time_category', y='goals', ax=ax,
                      palette='Set2')

        ax.set_xlabel('Playing Time Category', fontweight='bold', fontsize=10)
        ax.set_ylabel('Goals Scored', fontweight='bold', fontsize=10)
        ax.set_title('GOALS BY PLAYING TIME', fontweight='bold', fontsize=12, pad=15)
        ax.grid(axis='y', alpha=0.3)

        # Rotate x-axis labels to prevent overlap
        plt.setp(ax.get_xticklabels(), rotation=20, ha='right', fontsize=9)

    def _plot_correlation_heatmap(self, ax):
        """Plot correlation matrix of key metrics"""
        metrics = ['goals', 'assists', 'xG', 'xA', 'shots', 'key_passes',
                  'games', 'time', 'yellow_cards']

        correlation_matrix = self.df[metrics].corr()

        mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))
        sns.heatmap(correlation_matrix, mask=mask, annot=True, fmt='.2f',
                   cmap='RdYlBu_r', center=0, ax=ax, cbar_kws={'shrink': 0.8},
                   annot_kws={'fontsize': 8})

        ax.set_title('PERFORMANCE METRICS CORRELATION', fontweight='bold', fontsize=12, pad=15)

        # Rotate labels to prevent overlap
        plt.setp(ax.get_xticklabels(), rotation=45, ha='right', fontsize=8)
        plt.setp(ax.get_yticklabels(), rotation=0, fontsize=8)

        ax.set_title('PERFORMANCE METRICS CORRELATION', fontweight='bold', fontsize=14)

    def _plot_performance_distribution(self, ax):
        """Plot performance distribution"""
        # Create box plots for key metrics by position
        metrics_df = self.df.melt(id_vars=['position'],
                                 value_vars=['goals', 'assists', 'shots', 'key_passes'],
                                 var_name='metric', value_name='value')

        sns.boxplot(data=metrics_df, x='position', y='value', hue='metric', ax=ax)

        ax.set_xlabel('Position', fontweight='bold', fontsize=10)
        ax.set_ylabel('Performance Value', fontweight='bold', fontsize=10)
        ax.set_title('PERFORMANCE DISTRIBUTION BY POSITION', fontweight='bold', fontsize=12, pad=15)
        ax.legend(title='Metrics', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=8)
        plt.setp(ax.get_xticklabels(), rotation=30, ha='right', fontsize=9)

    def _plot_summary_stats(self, ax):
        """Plot summary statistics table"""
        ax.axis('off')

        # Calculate summary statistics
        total_players = len(self.df)
        total_goals = self.df['goals'].sum()
        total_assists = self.df['assists'].sum()
        avg_goals_per_player = self.df['goals'].mean()
        avg_assists_per_player = self.df['assists'].mean()
        top_scorer = self.df.loc[self.df['goals'].idxmax()]
        top_assister = self.df.loc[self.df['assists'].idxmax()]
        most_disciplined = self.df.loc[self.df['total_cards'].idxmax()]

        # Create summary text
        summary_text = f"""
        LEAGUE SUMMARY STATISTICS

        • Total Players Analyzed: {total_players}
        • Total Goals Scored: {total_goals}
        • Total Assists: {total_assists}
        • Average Goals per Player: {avg_goals_per_player:.2f}
        • Average Assists per Player: {avg_assists_per_player:.2f}

        TOP PERFORMERS:
        • Leading Scorer: {top_scorer['player_name']} ({top_scorer['team_title']}) - {top_scorer['goals']} goals
        • Top Assister: {top_assister['player_name']} ({top_assister['team_title']}) - {top_assister['assists']} assists
        • Most Cards: {most_disciplined['player_name']} ({most_disciplined['team_title']}) - {most_disciplined['total_cards']} total cards
        """

        ax.text(0.1, 0.5, summary_text, transform=ax.transAxes, fontsize=12,
                verticalalignment='center',
                bbox=dict(boxstyle="round,pad=0.5", facecolor="lightblue", alpha=0.8))

    def generate_insights(self):
        """Generate key insights from the data"""
        insights = []

        # Top scorer insight
        top_scorer = self.df.loc[self.df['goals'].idxmax()]
        insights.append(f"Top scorer: {top_scorer['player_name']} ({top_scorer['team_title']}) with {top_scorer['goals']} goals")

        # xG overperformance
        top_overperformer = self.df.loc[self.df['xG_overperformance'].idxmax()]
        if top_overperformer['xG_overperformance'] > 0:
            insights.append(f"Biggest xG overperformer: {top_overperformer['player_name']} (+{top_overperformer['xG_overperformance']:.2f})")

        # Most efficient team
        team_efficiency = self.df.groupby('team_title')['goal_conversion'].mean().sort_values(ascending=False)
        insights.append(f"Most efficient team: {team_efficiency.index[0]} ({team_efficiency.iloc[0]:.1f}% conversion rate)")

        # Position insights
        position_goals = self.df.groupby('position')['goals'].sum().sort_values(ascending=False)
        insights.append(f"Most prolific position: {position_goals.index[0]} ({position_goals.iloc[0]} total goals)")

        return insights

# Liste des saisons et correspondances DataFrame
saisons = [
    ('14_15', '2014-2015'),
    ('15_16', '2015-2016'),
    ('16_17', '2016-2017'),
    ('17_18', '2017-2018'),
    ('18_19', '2018-2019'),
    ('19_20', '2019-2020'),
    ('20_21', '2020-2021'),
    ('21_22', '2021-2022'),
    ('22_23', '2022-2023'),
    ('23_24', '2023-2024'),
    ('24_25', '2024-2025'),
]

for code, saison in saisons:
    df_name = f'df_serie_a_{code}'
    df = globals().get(df_name)
    if df is not None:
        dashboard = Ligue1Dashboard(df, saison=saison,ligue="La Liga")
        fig = dashboard.create_dashboard()
        fig.savefig(f'/content/Serie A/dashboard_{saison}.png')
    else:
        print(f"DataFrame {df_name} introuvable.")

import shutil
shutil.make_archive('/content/Serie A', 'zip', '/content/Serie A')
shutil.make_archive('/content/Ligue 1', 'zip', '/content/Ligue1')
shutil.make_archive('/content/Bundesliga', 'zip', '/content/Bundesliga')
shutil.make_archive('/content/Premier League', 'zip', '/content/EPL')
shutil.make_archive('/content/La Liga', 'zip', '/content/La liga')

shutil.make_archive('/content/datasets', 'zip', '/content/datasets')